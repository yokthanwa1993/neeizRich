/**
 * ‡∏•‡∏ö Rich Menu ‡πÅ‡∏•‡∏∞ Alias
 * LINE Rich Menu 2-Tab Switcher
 */

const fs = require('fs');
const path = require('path');
const LineAPI = require('../lib/line-api');

// ‡πÇ‡∏´‡∏•‡∏î config
require('dotenv').config({ path: './config/config.env' });

async function cleanup() {
    const lineAPI = new LineAPI();
    
    console.log('üóëÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö Rich Menu ‡πÅ‡∏•‡∏∞ Alias...\n');
    
    try {
        // ‡πÇ‡∏´‡∏•‡∏î Rich Menu IDs
        const configPath = path.join(__dirname, '../config/richmenu-ids.json');
        if (!fs.existsSync(configPath)) {
            console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå config/richmenu-ids.json');
            console.log('‡πÑ‡∏°‡πà‡∏°‡∏µ Rich Menu ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö');
            return;
        }
        
        const configData = JSON.parse(fs.readFileSync(configPath, 'utf8'));
        const { 
            RICHMENU_A_ID, 
            RICHMENU_B_ID, 
            RICHMENU_ALIAS_A, 
            RICHMENU_ALIAS_B 
        } = configData;
        
        // 1. ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å Rich Menu ‡∏à‡∏≤‡∏Å User
        const userId = process.env.USER_ID;
        if (userId && userId !== 'your_user_id_here') {
            console.log('üîó ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å Rich Menu ‡∏à‡∏≤‡∏Å User...');
            try {
                await lineAPI.unlinkRichMenuFromUser(userId);
                console.log('‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å Rich Menu ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            } catch (error) {
                console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡πÑ‡∏î‡πâ: ${error.message}`);
            }
        }
        
        // 2. ‡∏•‡∏ö Alias B
        console.log('üè∑Ô∏è ‡∏•‡∏ö Alias B...');
        try {
            await lineAPI.deleteAlias(RICHMENU_ALIAS_B);
            console.log('‚úÖ ‡∏•‡∏ö Alias B ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (error) {
            console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö Alias B ‡πÑ‡∏î‡πâ: ${error.message}`);
        }
        
        // 3. ‡∏•‡∏ö Alias A
        console.log('üè∑Ô∏è ‡∏•‡∏ö Alias A...');
        try {
            await lineAPI.deleteAlias(RICHMENU_ALIAS_A);
            console.log('‚úÖ ‡∏•‡∏ö Alias A ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (error) {
            console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö Alias A ‡πÑ‡∏î‡πâ: ${error.message}`);
        }
        
        // 4. ‡∏•‡∏ö Rich Menu B
        console.log('üóëÔ∏è ‡∏•‡∏ö Rich Menu B...');
        try {
            await lineAPI.deleteRichMenu(RICHMENU_B_ID);
            console.log('‚úÖ ‡∏•‡∏ö Rich Menu B ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (error) {
            console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö Rich Menu B ‡πÑ‡∏î‡πâ: ${error.message}`);
        }
        
        // 5. ‡∏•‡∏ö Rich Menu A
        console.log('üóëÔ∏è ‡∏•‡∏ö Rich Menu A...');
        try {
            await lineAPI.deleteRichMenu(RICHMENU_A_ID);
            console.log('‚úÖ ‡∏•‡∏ö Rich Menu A ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (error) {
            console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö Rich Menu A ‡πÑ‡∏î‡πâ: ${error.message}`);
        }
        
        // 6. ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå config
        console.log('üìÅ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå config...');
        try {
            fs.unlinkSync(configPath);
            console.log('‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå config/richmenu-ids.json ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (error) {
            console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå config ‡πÑ‡∏î‡πâ: ${error.message}`);
        }
        
        console.log('\nüéâ ‡∏•‡∏ö Rich Menu ‡πÅ‡∏•‡∏∞ Alias ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        console.log('üìã ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö:');
        console.log(`   - Rich Menu A: ${RICHMENU_A_ID}`);
        console.log(`   - Rich Menu B: ${RICHMENU_B_ID}`);
        console.log(`   - Alias A: ${RICHMENU_ALIAS_A}`);
        console.log(`   - Alias B: ${RICHMENU_ALIAS_B}`);
        console.log('   - ‡πÑ‡∏ü‡∏•‡πå config/richmenu-ids.json');
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
        throw error;
    }
}

// ‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
    cleanup().catch(error => {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
        process.exit(1);
    });
}

module.exports = { cleanup }; 