/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Rich Menu
 * LINE Rich Menu 2-Tab Switcher
 */

const fs = require('fs');
const path = require('path');
const LineAPI = require('../lib/line-api');

// ‡πÇ‡∏´‡∏•‡∏î config
require('dotenv').config({ path: './config/config.env' });

async function testRichMenu() {
    const lineAPI = new LineAPI();
    
    console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Rich Menu...\n');
    
    try {
        // 1. ‡∏î‡∏π Rich Menu ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        console.log('üìã Rich Menu ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:');
        const richMenuList = await lineAPI.getRichMenuList();
        console.log(`   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Rich Menu: ${richMenuList.richmenus.length}`);
        
        richMenuList.richmenus.forEach((menu, index) => {
            console.log(`   ${index + 1}. ${menu.name} (${menu.richMenuId})`);
        });
        
        // 2. ‡∏î‡∏π Rich Menu ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö User
        const userId = process.env.USER_ID;
        if (userId && userId !== 'your_user_id_here') {
            console.log('\nüë§ Rich Menu ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö User:');
            try {
                const userRichMenu = await lineAPI.getUserRichMenu(userId);
                console.log(`   User ID: ${userId}`);
                console.log(`   Rich Menu ID: ${userRichMenu.richMenuId}`);
            } catch (error) {
                console.log(`   ‡πÑ‡∏°‡πà‡∏°‡∏µ Rich Menu ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö User: ${error.message}`);
            }
        }
        
        // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå config
        const configPath = path.join(__dirname, '../config/richmenu-ids.json');
        if (fs.existsSync(configPath)) {
            console.log('\nüìÅ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Rich Menu ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå config:');
            const configData = JSON.parse(fs.readFileSync(configPath, 'utf8'));
            console.log(`   Menu A: ${configData.RICHMENU_A_ID}`);
            console.log(`   Menu B: ${configData.RICHMENU_B_ID}`);
            console.log(`   Alias A: ${configData.RICHMENU_ALIAS_A}`);
            console.log(`   Alias B: ${configData.RICHMENU_ALIAS_B}`);
        } else {
            console.log('\nüìÅ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå config/richmenu-ids.json');
        }
        
        // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        console.log('\nüñºÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:');
        const imageAPath = path.join(__dirname, '../images/menu-a.png');
        const imageBPath = path.join(__dirname, '../images/menu-b.png');
        
        if (fs.existsSync(imageAPath)) {
            const stats = fs.statSync(imageAPath);
            console.log(`   ‚úÖ menu-a.png (${(stats.size / 1024).toFixed(2)} KB)`);
        } else {
            console.log('   ‚ùå menu-a.png (‡πÑ‡∏°‡πà‡∏û‡∏ö)');
        }
        
        if (fs.existsSync(imageBPath)) {
            const stats = fs.statSync(imageBPath);
            console.log(`   ‚úÖ menu-b.png (${(stats.size / 1024).toFixed(2)} KB)`);
        } else {
            console.log('   ‚ùå menu-b.png (‡πÑ‡∏°‡πà‡∏û‡∏ö)');
        }
        
        console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
        console.log('\nüìù ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:');
        console.log('   - ‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu: npm run create');
        console.log('   - ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: npm run upload');
        console.log('   - ‡∏ú‡∏π‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡πâ User: npm run link');
        console.log('   - ‡∏•‡∏ö Rich Menu: npm run cleanup');
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
        throw error;
    }
}

// ‡∏£‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
    testRichMenu().catch(error => {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
        process.exit(1);
    });
}

module.exports = { testRichMenu }; 