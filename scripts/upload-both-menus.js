const LineAPI = require('../line-api.js');
const fs = require('fs');
const path = require('path');

async function uploadBothMenus() {
  try {
    const lineAPI = new LineAPI();
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤
    console.log('üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤...');
    const menuList = await lineAPI.getRichMenuList();
    for (const menu of menuList.richmenus) {
      await lineAPI.deleteRichMenu(menu.richMenuId).catch(() => {});
    }
    
    // ‡∏•‡∏ö alias ‡πÄ‡∏Å‡πà‡∏≤
    const aliases = ['main-menu', 'delivery-menu'];
    for (const alias of aliases) {
      await lineAPI.deleteAlias(alias).catch(() => {});
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu ‡∏´‡∏•‡∏±‡∏Å
    console.log('üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu ‡∏´‡∏•‡∏±‡∏Å...');
    const mainConfig = JSON.parse(fs.readFileSync(path.join(__dirname, '../richmenu.json'), 'utf8'));
    const mainResult = await lineAPI.createRichMenu(mainConfig);
    const mainMenuId = mainResult.richMenuId;
    
    // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å
    console.log('üñºÔ∏è ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å...');
    const mainImagePath = path.join(__dirname, '../menu.png');
    await lineAPI.uploadRichMenuImage(mainMenuId, mainImagePath);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu ‡πÄ‡∏î‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡∏µ‡πà
    console.log('üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu ‡πÄ‡∏î‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡∏µ‡πà...');
    const deliveryConfig = JSON.parse(fs.readFileSync(path.join(__dirname, '../richmenu-delivery.json'), 'utf8'));
    const deliveryResult = await lineAPI.createRichMenu(deliveryConfig);
    const deliveryMenuId = deliveryResult.richMenuId;
    
    // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡∏µ‡πà
    console.log('üñºÔ∏è ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡∏µ‡πà...');
    const deliveryImagePng = path.join(__dirname, '../menu2.png');
    const deliveryImageJpg = path.join(__dirname, '../menu2.jpg');
    
    let deliveryImagePath;
    if (fs.existsSync(deliveryImageJpg)) {
      deliveryImagePath = deliveryImageJpg;
      console.log('‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ menu2.jpg ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡∏µ‡πà');
    } else if (fs.existsSync(deliveryImagePng)) {
      deliveryImagePath = deliveryImagePng;
      console.log('‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ menu2.png ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡∏µ‡πà');
    } else {
      deliveryImagePath = mainImagePath;
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö menu2 ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å');
    }
    
    await lineAPI.uploadRichMenuImage(deliveryMenuId, deliveryImagePath);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Alias
    console.log('üè∑Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á Alias...');
    await lineAPI.createAlias('main-menu', mainMenuId);
    await lineAPI.createAlias('delivery-menu', deliveryMenuId);
    
    // ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö User
    console.log('üîó ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö User...');
    const userId = process.env.USER_ID;
    await lineAPI.linkRichMenuToUser(userId, mainMenuId);
    
    console.log('‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log(`Main Rich Menu ID: ${mainMenuId}`);
    console.log(`Delivery Rich Menu ID: ${deliveryMenuId}`);
    console.log('‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Rich Menu');
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  }
}

uploadBothMenus();