/**
 * LINE Webhook Server
 * ‡∏£‡∏±‡∏ö webhook events ‡∏à‡∏≤‡∏Å LINE ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á User ID
 */

const express = require('express');
const crypto = require('crypto');
require('dotenv').config({ path: './config/config.env' });

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json({ verify: (req, res, buf) => {
    req.rawBody = buf;
}}));

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signature ‡∏à‡∏≤‡∏Å LINE
function verifySignature(req) {
    const signature = req.headers['x-line-signature'];
    const channelSecret = process.env.CHANNEL_SECRET || 'your_channel_secret_here';
    const hash = crypto.createHmac('SHA256', channelSecret)
        .update(req.rawBody)
        .digest('base64');
    return signature === hash;
}

// Webhook endpoint
app.post('/webhook', (req, res) => {
    console.log('üì® ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö webhook event...');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signature
    if (!verifySignature(req)) {
        console.log('‚ùå Invalid signature');
        return res.status(401).send('Unauthorized');
    }
    
    const events = req.body.events;
    
    events.forEach(event => {
        if (event.type === 'message') {
            const userId = event.source.userId;
            const message = event.message.text;
            
            console.log('\nüéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:');
            console.log('üì± User ID:', userId);
            console.log('üí¨ Message:', message);
            console.log('üìÖ Timestamp:', new Date(event.timestamp).toLocaleString());
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å User ID ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
            const fs = require('fs');
            const userData = {
                userId: userId,
                message: message,
                timestamp: new Date(event.timestamp).toISOString()
            };
            
            fs.writeFileSync('./user-id.json', JSON.stringify(userData, null, 2));
            console.log('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å User ID ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå user-id.json ‡πÅ‡∏•‡πâ‡∏ß');
            
            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
            replyMessage(event.replyToken, `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß! User ID: ${userId}`);
        }
    });
    
    res.status(200).send('OK');
});

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
async function replyMessage(replyToken, message) {
    const axios = require('axios');
    const token = process.env.CHANNEL_ACCESS_TOKEN;
    
    try {
        await axios.post('https://api.line.me/v2/bot/message/reply', {
            replyToken: replyToken,
            messages: [{
                type: 'text',
                text: message
            }]
        }, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        console.log('‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ:', error.message);
    }
}

// Health check endpoint
app.get('/', (req, res) => {
    res.send(`
        <h1>LINE Webhook Server</h1>
        <p>Server ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà</p>
        <p>‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤ Bot ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ User ID</p>
        <p>User ID ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå user-id.json</p>
    `);
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏° server
app.listen(PORT, () => {
    console.log(`üöÄ Webhook Server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà port ${PORT}`);
    console.log(`üì° Webhook URL: http://localhost:${PORT}/webhook`);
    console.log('\nüìù ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
    console.log('1. ‡πÄ‡∏õ‡∏¥‡∏î LINE App');
    console.log('2. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤ Bot ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì');
    console.log('3. ‡∏î‡∏π User ID ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•');
    console.log('4. ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå user-id.json');
    console.log('\nüí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:');
    console.log('- ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ webhook URL ‡πÉ‡∏ô LINE Developers Console');
    console.log('- ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ CHANNEL_SECRET ‡πÉ‡∏ô config.env');
});

module.exports = app; 