#!/usr/bin/env node

/**
 * LINE Rich Menu 2-Tab Switcher
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu ‡πÅ‡∏ö‡∏ö 2 ‡πÅ‡∏ó‡πá‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Node.js
 */

const express = require('express');
const { createRichMenus } = require('./scripts/create-richmenus');
const { uploadImages } = require('./scripts/upload-images');
const { linkToUser } = require('./scripts/link-to-user');
const { cleanup } = require('./scripts/cleanup');
const { createSampleImages } = require('./scripts/create-sample-images');
const { createSimpleImages } = require('./scripts/create-simple-images');

async function main() {
    const command = process.argv[2];
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô serve command ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô web server
    if (command === 'serve') {
        const app = express();
        const PORT = process.env.PORT || 3000;
        
        app.use(express.json({ verify: (req, res, buf) => {
            req.rawBody = buf;
        }}));
        app.use(express.static('public'));
        
        // Health check endpoint
        app.get('/health', (req, res) => {
            res.json({ status: 'OK', timestamp: new Date().toISOString() });
        });
        
        // Webhook endpoint
        app.post('/webhook', (req, res) => {
            console.log('üì® ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö webhook event...');
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signature
            const crypto = require('crypto');
            const signature = req.headers['x-line-signature'];
            const channelSecret = process.env.CHANNEL_SECRET || 'your_channel_secret_here';
            
            if (req.rawBody && channelSecret !== 'your_channel_secret_here') {
                const hash = crypto.createHmac('SHA256', channelSecret)
                    .update(req.rawBody)
                    .digest('base64');
                
                if (signature !== hash) {
                    console.log('‚ùå Invalid signature');
                    return res.status(401).send('Unauthorized');
                }
            }
            
            const events = req.body.events || [];
            
            events.forEach(event => {
                if (event.type === 'message') {
                    const userId = event.source.userId;
                    const message = event.message.text;
                    
                    console.log('\nüéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:');
                    console.log('üì± User ID:', userId);
                    console.log('üí¨ Message:', message);
                    console.log('üìÖ Timestamp:', new Date(event.timestamp).toLocaleString());
                    
                    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å User ID ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
                    const fs = require('fs');
                    const userData = {
                        userId: userId,
                        message: message,
                        timestamp: new Date(event.timestamp).toISOString()
                    };
                    
                    try {
                        fs.writeFileSync('./user-id.json', JSON.stringify(userData, null, 2));
                        console.log('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å User ID ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå user-id.json ‡πÅ‡∏•‡πâ‡∏ß');
                    } catch (error) {
                        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ:', error.message);
                    }
                }
            });
            
            res.status(200).send('OK');
        });

        // API endpoints
        app.get('/api/status', (req, res) => {
            res.json({
                name: 'neeizRich',
                version: '1.0.0',
                description: 'LINE Rich Menu 2-tab switcher',
                status: 'running'
            });
        });
        
        app.post('/api/create', async (req, res) => {
            try {
                await createRichMenus();
                res.json({ success: true, message: 'Rich Menu created successfully' });
            } catch (error) {
                res.status(500).json({ success: false, error: error.message });
            }
        });
        
        app.post('/api/deploy', async (req, res) => {
            try {
                await createRichMenus();
                await uploadImages();
                await linkToUser();
                res.json({ success: true, message: 'Deploy completed successfully' });
            } catch (error) {
                res.status(500).json({ success: false, error: error.message });
            }
        });
        
        // Root endpoint
        app.get('/', (req, res) => {
            res.send(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>neeizRich - LINE Rich Menu</title>
                    <meta charset="utf-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1">
                    <style>
                        body { font-family: Arial, sans-serif; margin: 40px; }
                        .container { max-width: 800px; margin: 0 auto; }
                        .card { background: #f9f9f9; padding: 20px; border-radius: 8px; margin: 20px 0; }
                        .btn { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }
                        .btn:hover { background: #0056b3; }
                        .status { color: #28a745; }
                        .error { color: #dc3545; }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>üöÄ neeizRich</h1>
                        <p>LINE Rich Menu 2-tab switcher</p>
                        
                        <div class="card">
                            <h2>üìã Status</h2>
                            <div id="status">Loading...</div>
                        </div>
                        
                        <div class="card">
                            <h2>‚ö° Quick Actions</h2>
                            <button class="btn" onclick="deploy()">üöÄ Deploy Rich Menu</button>
                            <button class="btn" onclick="checkStatus()">üìä Check Status</button>
                        </div>
                        
                        <div class="card">
                            <h2>üìù API Endpoints</h2>
                            <ul>
                                <li><code>GET /health</code> - Health check</li>
                                <li><code>GET /api/status</code> - App status</li>
                                <li><code>POST /api/create</code> - Create Rich Menu</li>
                                <li><code>POST /api/deploy</code> - Deploy everything</li>
                            </ul>
                        </div>
                    </div>
                    
                    <script>
                        async function checkStatus() {
                            try {
                                const response = await fetch('/api/status');
                                const data = await response.json();
                                document.getElementById('status').innerHTML = 
                                    '<span class="status">‚úÖ Running</span><br>' +
                                    'Name: ' + data.name + '<br>' +
                                    'Version: ' + data.version;
                            } catch (error) {
                                document.getElementById('status').innerHTML = 
                                    '<span class="error">‚ùå Error: ' + error.message + '</span>';
                            }
                        }
                        
                        async function deploy() {
                            try {
                                document.getElementById('status').innerHTML = 'üîÑ Deploying...';
                                const response = await fetch('/api/deploy', { method: 'POST' });
                                const data = await response.json();
                                if (data.success) {
                                    document.getElementById('status').innerHTML = 
                                        '<span class="status">‚úÖ ' + data.message + '</span>';
                                } else {
                                    document.getElementById('status').innerHTML = 
                                        '<span class="error">‚ùå ' + data.error + '</span>';
                                }
                            } catch (error) {
                                document.getElementById('status').innerHTML = 
                                    '<span class="error">‚ùå Error: ' + error.message + '</span>';
                            }
                        }
                        
                        // Check status on load
                        checkStatus();
                    </script>
                </body>
                </html>
            `);
        });
        
        app.listen(PORT, () => {
            console.log(`üöÄ neeizRich server running on port ${PORT}`);
            console.log(`üìä Health check: http://localhost:${PORT}/health`);
            console.log(`üåê Web interface: http://localhost:${PORT}`);
        });
        
        return;
    }
    
    console.log('üöÄ LINE Rich Menu 2-Tab Switcher');
    console.log('=====================================\n');
    
    try {
        switch (command) {
            case 'create':
                console.log('üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu ‡πÅ‡∏•‡∏∞ Alias...');
                await createRichMenus();
                break;
                
            case 'upload':
                console.log('üñºÔ∏è ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...');
                await uploadImages();
                break;
                
            case 'link':
                console.log('üîó ‡∏ú‡∏π‡∏Å Rich Menu ‡πÉ‡∏´‡πâ User...');
                await linkToUser();
                break;
                
            case 'cleanup':
                console.log('üóëÔ∏è ‡∏•‡∏ö Rich Menu ‡πÅ‡∏•‡∏∞ Alias...');
                await cleanup();
                break;
                
            case 'deploy':
                console.log('üöÄ Deploy ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...');
                await createRichMenus();
                await uploadImages();
                await linkToUser();
                console.log('\nüéâ Deploy ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
                break;
                
            case 'samples':
                console.log('üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...');
                await createSampleImages();
                break;
                
            case 'simple':
                console.log('üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏á‡πà‡∏≤‡∏¢‡πÜ...');
                await createSimpleImages();
                break;
                
            default:
                console.log('üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ:');
                console.log('  npm run create   - ‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu ‡πÅ‡∏•‡∏∞ Alias');
                console.log('  npm run upload   - ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
                console.log('  npm run link     - ‡∏ú‡∏π‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡πâ User');
                console.log('  npm run cleanup  - ‡∏•‡∏ö Rich Menu ‡πÅ‡∏•‡∏∞ Alias');
                console.log('  npm run deploy   - Deploy ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
                console.log('  npm run test     - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Rich Menu');
                console.log('  npm run samples  - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á');
                console.log('  npm run simple   - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏á‡πà‡∏≤‡∏¢‡πÜ');
                console.log('  npm start        - ‡∏£‡∏±‡∏ô web server');
                console.log('\nüìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: node index.js create');
                console.log('\nüöÄ Quick Start:');
                console.log('   1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç config/config.env');
                console.log('   2. npm run simple (‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)');
                console.log('   3. npm run deploy (Deploy ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)');
                console.log('   4. npm start (‡∏£‡∏±‡∏ô web server)');
                break;
        }
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
        process.exit(1);
    }
}

if (require.main === module) {
    main();
}

module.exports = { main }; 